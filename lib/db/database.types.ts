/**
 * Database type definitions auto-generated by Supabase CLI
 *
 * Generated from local PostgreSQL database schema
 * To regenerate: npx supabase gen types typescript --db-url "postgresql://postgres:PASSWORD@localhost:5432/postgres"
 */

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[];

// Source type for flashcard provenance (manual vs AI-generated)
export type FlashcardSourceType = "manual" | "ai" | "ai-edited";

export interface Database {
  public: {
    Tables: {
      ai_generations: {
        Row: {
          created_at: string; // timestamptz
          duration_ms: number; // AI generation duration in milliseconds
          generated_count: number; // Number of flashcards generated
          generated_proposals: Json; // jsonb array of {front: string, back: string}
          id: string; // uuid
          input_text: string; // User's input text for generation
          model_name: string; // AI model used (e.g., 'gpt-4o-mini')
          user_id: string; // uuid
        };
        Insert: {
          created_at?: string;
          duration_ms?: number;
          generated_count?: number;
          generated_proposals?: Json;
          id?: string;
          input_text: string;
          model_name: string;
          user_id: string;
        };
        Update: {
          created_at?: string;
          duration_ms?: number;
          generated_count?: number;
          generated_proposals?: Json;
          id?: string;
          input_text?: string;
          model_name?: string;
          user_id?: string;
        };
        Relationships: [];
      };
      ai_generations_acceptance: {
        Row: {
          accepted_count: number; // Number of accepted flashcards from this generation
          ai_generation_id: string; // uuid, references ai_generations.id
          created_at: string; // timestamptz
          user_id: string; // uuid
        };
        Insert: {
          accepted_count?: number;
          ai_generation_id: string;
          created_at?: string;
          user_id: string;
        };
        Update: {
          accepted_count?: number;
          ai_generation_id?: string;
          created_at?: string;
          user_id?: string;
        };
        Relationships: [
          {
            foreignKeyName: "ai_generations_acceptance_ai_generation_user_fk";
            columns: ["ai_generation_id", "user_id"];
            isOneToOne: false;
            referencedRelation: "ai_generations";
            referencedColumns: ["id", "user_id"];
          },
        ];
      };
      flashcard_sources: {
        Row: {
          created_at: string; // timestamptz
          flashcard_source_id: string; // uuid
          source_id: string | null; // uuid, references ai_generations.id (null for manual)
          source_type: FlashcardSourceType; // 'manual' | 'ai' | 'ai-edited'
          user_id: string; // uuid
        };
        Insert: {
          created_at?: string;
          flashcard_source_id?: string;
          source_id?: string | null;
          source_type: FlashcardSourceType;
          user_id: string;
        };
        Update: {
          created_at?: string;
          flashcard_source_id?: string;
          source_id?: string | null;
          source_type?: FlashcardSourceType;
          user_id?: string;
        };
        Relationships: [
          {
            foreignKeyName: "flashcard_sources_ai_source_fk";
            columns: ["source_id", "user_id"];
            isOneToOne: false;
            referencedRelation: "ai_generations";
            referencedColumns: ["id", "user_id"];
          },
        ];
      };
      flashcards: {
        Row: {
          back: string; // Flashcard back side (answer)
          created_at: string; // timestamptz
          flashcard_id: string; // uuid
          flashcard_source_id: string; // uuid, references flashcard_sources
          front: string; // Flashcard front side (question)
          source_type: FlashcardSourceType; // Denormalized source type for quick access
          user_id: string; // uuid
        };
        Insert: {
          back: string;
          created_at?: string;
          flashcard_id?: string;
          flashcard_source_id: string;
          front: string;
          source_type: FlashcardSourceType;
          user_id: string;
        };
        Update: {
          back?: string;
          created_at?: string;
          flashcard_id?: string;
          flashcard_source_id?: string;
          front?: string;
          source_type?: FlashcardSourceType;
          user_id?: string;
        };
        Relationships: [
          {
            foreignKeyName: "flashcards_source_fk";
            columns: ["flashcard_source_id", "user_id"];
            isOneToOne: false;
            referencedRelation: "flashcard_sources";
            referencedColumns: ["flashcard_source_id", "user_id"];
          },
        ];
      };
      schema_migrations: {
        Row: {
          version: string; // Migration version identifier
        };
        Insert: {
          version: string;
        };
        Update: {
          version?: string;
        };
        Relationships: [];
      };
    };
    Views: Record<never, never>;
    Functions: Record<never, never>;
    Enums: {
      aal_level: "aal1" | "aal2" | "aal3";
      code_challenge_method: "s256" | "plain";
      factor_status: "unverified" | "verified";
      factor_type: "totp" | "webauthn";
    };
    CompositeTypes: Record<never, never>;
  };
}

type DatabaseWithoutInternals = Omit<Database, "__InternalSupabase">;

type DefaultSchema = DatabaseWithoutInternals[Extract<
  keyof Database,
  "public"
>];

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema["Tables"] & DefaultSchema["Views"])
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals;
  }
    ? keyof (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
        DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals;
}
  ? (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
      DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R;
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema["Tables"] &
        DefaultSchema["Views"])
    ? (DefaultSchema["Tables"] &
        DefaultSchema["Views"])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R;
      }
      ? R
      : never
    : never;

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals;
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals;
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I;
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I;
      }
      ? I
      : never
    : never;

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals;
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals;
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U;
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U;
      }
      ? U
      : never
    : never;

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema["Enums"]
    | { schema: keyof DatabaseWithoutInternals },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals;
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals;
}
  ? DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema["Enums"]
    ? DefaultSchema["Enums"][DefaultSchemaEnumNameOrOptions]
    : never;

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema["CompositeTypes"]
    | { schema: keyof DatabaseWithoutInternals },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals;
  }
    ? keyof DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals;
}
  ? DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema["CompositeTypes"]
    ? DefaultSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never;

export const Constants = {
  public: {
    Enums: {
      aal_level: ["aal1", "aal2", "aal3"],
      code_challenge_method: ["s256", "plain"],
      factor_status: ["unverified", "verified"],
      factor_type: ["totp", "webauthn"],
    },
  },
} as const;
